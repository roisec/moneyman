diff --git a/node_modules/israeli-bank-scrapers/lib/helpers/fetch.js b/node_modules/israeli-bank-scrapers/lib/helpers/fetch.js
index 843eadb..8dfa390 100644
--- a/node_modules/israeli-bank-scrapers/lib/helpers/fetch.js
+++ b/node_modules/israeli-bank-scrapers/lib/helpers/fetch.js
@@ -56,20 +56,17 @@ async function fetchGraphql(url, query, variables = {}, extraHeaders = {}) {
   return result.data;
 }
 function fetchGetWithinPage(page, url) {
-  return page.evaluate(innerUrl => {
-    return new Promise((resolve, reject) => {
-      fetch(innerUrl, {
-        credentials: 'include'
-      }).then(result => {
-        if (result.status === 204) {
-          resolve(null);
-        } else {
-          resolve(result.json());
-        }
-      }).catch(e => {
-        reject(e);
-      });
-    });
+  return page.evaluate(async innerUrl => {
+    let result;
+    try {
+      result = await fetch(innerUrl, { credentials: 'include' });
+      if (result.status === 204) {
+        return null;
+      }
+      return result.json();
+    } catch (e) {
+      throw new Error(`fetchGetWithinPage error: ${e}, url: ${innerUrl}, stack: ${e?.stack}, status: ${result?.status}`);
+    }
   }, url);
 }
 function fetchPostWithinPage(page, url, data, extraHeaders = {}) {
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/base-isracard-amex.js b/node_modules/israeli-bank-scrapers/lib/scrapers/base-isracard-amex.js
index 8827ffc..8b9220c 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/base-isracard-amex.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/base-isracard-amex.js
@@ -241,6 +241,16 @@ class IsracardAmexBaseScraper extends _baseScraperWithBrowser.BaseScraperWithBro
     });
     await (0, _browser.maskHeadlessUserAgent)(this.page);
     await this.navigateTo(`${this.baseUrl}/personalarea/Login`);
+    try {
+      const initialPageTitle = await this.page.title();
+      debug("initial page title: ", initialPageTitle);
+      if (!initialPageTitle.includes('ישראכרט') && !initialPageTitle.includes('אמריקן אקספרס')) {
+        debug("waiting for page to load");
+        await this.page.waitForNavigation({ timeout: 60_000 });
+      }
+    } catch (error) {
+      debug("error while waiting for navigation: ", error);
+    }
     this.emitProgress(_definitions.ScraperProgressTypes.LoggingIn);
     const validateUrl = `${this.servicesUrl}?reqName=ValidateIdData`;
     const validateRequest = {
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/visa-cal.js b/node_modules/israeli-bank-scrapers/lib/scrapers/visa-cal.js
index 9faabd8..190c2cf 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/visa-cal.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/visa-cal.js
@@ -166,13 +166,31 @@ class VisaCalScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
     }));
   }
   async getAuthorizationHeader() {
+    debug('AUTH: Starting authorization header retrieval');
     if (!this.authorization) {
-      const authModule = await (0, _waiting.waitUntil)(() => (0, _storage.getFromSessionStorage)(this.page, 'auth-module'), 'get authorization header in session storage', 10000, 1000);
+      debug('AUTH: Checking session storage for auth-module...');
+      const authModule = await (0, _waiting.waitUntil)(
+        async () => {
+          const result = await (0, _storage.getFromSessionStorage)(this.page, 'auth-module');
+          debug('AUTH: Session storage check result:', result ? 'Found' : 'Not found');
+          if (result && result.auth) {
+            debug('AUTH: Token exists:', !!result.auth.calConnectToken);
+          }
+          return result && result.auth && result.auth.calConnectToken ? result : null;
+        }, 
+        'get authorization header in session storage', 
+        15000, 
+        1000
+      );
+      
       if (authModule?.auth.calConnectToken) {
+        debug('AUTH: ✅ Authorization successful');
         return `CALAuthScheme ${authModule.auth.calConnectToken}`;
       }
+      debug('AUTH: ❌ Authorization failed');
       throw new Error('could not retrieve authorization header');
     }
+    debug('AUTH: Using cached authorization');
     return this.authorization;
   }
   async getXSiteId() {
@@ -192,7 +210,7 @@ class VisaCalScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
   }
   getLoginOptions(credentials) {
     this.authRequestPromise = this.page.waitForRequest(SSO_AUTHORIZATION_REQUEST_ENDPOINT, {
-      timeout: 10_000
+      timeout: 30_000  // Increased from 10s to 30s
     }).catch(e => {
       debug('error while waiting for the token request', e);
       return undefined;
@@ -255,10 +273,16 @@ class VisaCalScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
           'X-Site-Id': xSiteId,
           'Content-Type': 'application/json'
         });
-        if (monthData?.statusCode !== 1) throw new Error(`failed to fetch transactions for card ${card.last4Digits}. Message: ${monthData?.title || ''}`);
+        debug('FETCH: Response statusCode:', monthData?.statusCode, 'for card', card.last4Digits);
+        if (monthData?.statusCode !== 1) {
+          debug('FETCH: ❌ Failed - StatusCode:', monthData?.statusCode, 'Title present:', !!monthData?.title);
+          throw new Error(`failed to fetch transactions for card ${card.last4Digits}. Message: ${monthData?.title || ''}`);
+        }
         if (!isCardTransactionDetails(monthData)) {
+          debug('FETCH: ❌ Invalid response format - has result:', !!monthData?.result);
           throw new Error('monthData is not of type CardTransactionDetails');
         }
+        debug('FETCH: ✅ Success for card', card.last4Digits);
         allMonthsData.push(monthData);
       }
       if (pendingData?.statusCode !== 1 && pendingData?.statusCode !== 96) {
